# -*- mode: sh -*-

function prompt()
{
    git status > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
	BRANCH=`git rev-parse --abbrev-ref HEAD`
	BRANCH_BASENAME=`basename $BRANCH`
	echo -e '\033]2;'${BRANCH}'\007'
    else
	printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"
    fi
}

function tempo_log()
{
    LOG=~/.tempo.log
    JIRA="NONE"
    git status > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
        JIRA=`/bin/git rev-parse --abbrev-ref HEAD | cut -d\/ -f2 | cut -d\- -f1-2`
    fi
    TIMESTAMP=`date '+%Y%m%d %H:%M:%S'`
    HOSTNAME=`hostname -s`
    echo "${TIMESTAMP}|${HOSTNAME}|${JIRA}|${1}" >> $LOG
}

function make()
{
    tempo_log "make"
    /bin/make "$@"
}

# make test -j5 RECURSIVE=YES TB_APPS=~/work/apps PROFILE=debug ENABLE_LLVM_COVERAGE=YES
function tbcov()
{
    DEPENDS_DIR=`echo ${PWD} | sed 's!/tests!!g'`
    OUTPUT=.profraw
    REPORT=.profdata
    BINARY=`find ${DEPENDS_DIR} -name '*.so'`
    if [ ! -x ${BINARY} ] ; then
        echo "Unable to find binary to test in ${DEPENDS_DIR}"
        return
    fi
    REGEXP_FILTER='.+_definitions.h|.+.hpp|.+_generated.h|third_party.+|shared.+'
    ${LLVM}/bin/llvm-profdata merge -sparse -o $OUTPUT `find . -name '*.profraw'`
    ${LLVM}/bin/llvm-cov export -instr-profile $OUTPUT --format=lcov -ignore-filename-regex=${REGEXP_FILTER} ${BINARY} > ${REPORT}
    ${LLVM}/bin/llvm-cov report -instr-profile $OUTPUT -ignore-filename-regex=${REGEXP_FILTER} ${BINARY}
}

function code-tidy()
{
    ${LLVM}/share/clang/run-clang-tidy.py -j4 -fix  -style file -header-filter='^((?!(.*\/shared\/.*)).)*$' -clang-tidy-binary ${LLVM}/bin/clang-tidy -clang-apply-replacements-binary ${LLVM}/bin/clang-apply-replacements
}

function setsdk()
{
    VERSION=$1
    SELECTED_COUNT=`ls -ald $TBRICKS/*sdk-*$VERSION* | wc -l`
    if [ -z "$SELECTED_COUNT" ]; then
        echo "No sdk version: $VERSION"
        return
    elif [ $SELECTED_COUNT != "1" ]; then
        echo "$VERSION is ambiguous when selecting sdk"
        return
    else
        export SDK=`eval echo "$TBRICKS/*sdk-$VERSION*"`
        if [ -L $TBRICKS/sdk ] ; then
            rm -f $TBRICKS/sdk
        fi
        ln -s $SDK $TBRICKS/sdk
        export SDK=$TBRICKS/sdk
        recompute_manpath
        echo "SDK is `realpath $SDK`"
    fi
}

function create_user()
{
    SYSTEM=$1
    USER=`id -un`
    tbuser create ${USER} ${SYSTEM}
    tbuser set roles=Unrestricted ${USER} ${SYSTEM}
    tbuser set password= ${USER} ${SYSTEM}
}

function recompute_manpath()
{
    MANPATH=/usr/share/man:/usr/local/share/man:/usr/share/locale/man:
    MANPATH+=$LLVM/share/man:$GCC_SUITE/share/man:
    MANPATH+=$ADMIN_ROOT/doc/man:$SDK/doc/man:$SDK/doc/libraries/strategy/man
    export MANPATH
}

function recompute_appsroot()
{
    SEARCH_PATH=".."
    while [ ! -f ${SEARCH_PATH}/.appsroot ] ; do
        SEARCH_PATH="${SEARCH_PATH}/.."
        if [ `pwd | tr '/' '\n' | wc -l` -lt `echo ${SEARCH_PATH} | tr '/' '\n' | wc -l` ] ; then
            return 1
        fi
    done

    export MK_SRCROOT=`readlink -f ${SEARCH_PATH}`
}

export PROMPT_COMMAND=prompt
export PS1='\[\e[1;32m\]\h:\W\[\e[m\]$ '

LOCAL_TBSH=$HOME/.local_tbsh
if [ -f $LOCAL_TBSH ] ; then
    source $LOCAL_TBSH
else
    export TBRICKS="/opt/tbricks"
    export TBRICKS_ADMIN_CENTER=dev_jmm_admin_sys
    export TBRICKS_ROOT=$TBRICKS
    export ADMIN_ROOT="$TBRICKS/admin"
fi

# clang++
LLVM="/opt/llvm-10"
# g++
GCC_SUITE="/opt/gcc-8.2.0"
export GCC_SUITE LLVM

recompute_manpath

if [ -f ${ADMIN_ROOT}/etc/bash/.tbricks_completion.bash ] ; then
    source $ADMIN_ROOT/etc/bash/.tbricks_completion.bash
fi

export TB_APPS=$HOME/work/apps
export MK_SRCROOT=$HOME/work/apps
export MAKE=gmake
: "${SDK:=$TBRICKS/sdk}"
export SDK
export CLANG_TIDY_CHECKS='-*,performance-no-automatic-move,performance-move-const-arg,performance-inefficient-vector-operation,bugprone-unused-raii,bugprone-use-after-move,bugprone-bool-pointer-implicit-conversion,performance-implicit-conversion-in-loop,readability-implicit-bool-conversion,bugprone-misplaced-widening-cast,bugprone-move-forwarding-reference,bugprone-bool-pointer-implicit-conversion,bugprone-string-constructor,bugprone-string-integer-assignment'
 
export CLANG_TIDY_ARGS="--quiet --config=\"{Checks: '*', CheckOptions: [{key: readability-implicit-bool-conversion.AllowIntegerConditions, value: 1}, {key: readability-implicit-bool-conversion.AllowPointerConditions, value: 1}, {key: performance-move-const-arg.CheckTriviallyCopyableMove, value: 0}]}\""
